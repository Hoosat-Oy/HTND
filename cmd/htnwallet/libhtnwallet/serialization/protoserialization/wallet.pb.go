// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.17.2
// source: wallet.proto

package protoserialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartiallySignedTransaction struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	Tx                    *TransactionMessage     `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	PartiallySignedInputs []*PartiallySignedInput `protobuf:"bytes,2,rep,name=partiallySignedInputs,proto3" json:"partiallySignedInputs,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PartiallySignedTransaction) Reset() {
	*x = PartiallySignedTransaction{}
	mi := &file_wallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartiallySignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiallySignedTransaction) ProtoMessage() {}

func (x *PartiallySignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiallySignedTransaction.ProtoReflect.Descriptor instead.
func (*PartiallySignedTransaction) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *PartiallySignedTransaction) GetTx() *TransactionMessage {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *PartiallySignedTransaction) GetPartiallySignedInputs() []*PartiallySignedInput {
	if x != nil {
		return x.PartiallySignedInputs
	}
	return nil
}

type PartiallySignedInput struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RedeemScript         []byte                 `protobuf:"bytes,1,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	PrevOutput           *TransactionOutput     `protobuf:"bytes,2,opt,name=prevOutput,proto3" json:"prevOutput,omitempty"`
	MinimumSignatures    uint32                 `protobuf:"varint,3,opt,name=minimumSignatures,proto3" json:"minimumSignatures,omitempty"`
	PubKeySignaturePairs []*PubKeySignaturePair `protobuf:"bytes,4,rep,name=pubKeySignaturePairs,proto3" json:"pubKeySignaturePairs,omitempty"`
	DerivationPath       string                 `protobuf:"bytes,5,opt,name=derivationPath,proto3" json:"derivationPath,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PartiallySignedInput) Reset() {
	*x = PartiallySignedInput{}
	mi := &file_wallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartiallySignedInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiallySignedInput) ProtoMessage() {}

func (x *PartiallySignedInput) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiallySignedInput.ProtoReflect.Descriptor instead.
func (*PartiallySignedInput) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *PartiallySignedInput) GetRedeemScript() []byte {
	if x != nil {
		return x.RedeemScript
	}
	return nil
}

func (x *PartiallySignedInput) GetPrevOutput() *TransactionOutput {
	if x != nil {
		return x.PrevOutput
	}
	return nil
}

func (x *PartiallySignedInput) GetMinimumSignatures() uint32 {
	if x != nil {
		return x.MinimumSignatures
	}
	return 0
}

func (x *PartiallySignedInput) GetPubKeySignaturePairs() []*PubKeySignaturePair {
	if x != nil {
		return x.PubKeySignaturePairs
	}
	return nil
}

func (x *PartiallySignedInput) GetDerivationPath() string {
	if x != nil {
		return x.DerivationPath
	}
	return ""
}

type PubKeySignaturePair struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExtendedPubKey string                 `protobuf:"bytes,1,opt,name=extendedPubKey,proto3" json:"extendedPubKey,omitempty"`
	Signature      []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PubKeySignaturePair) Reset() {
	*x = PubKeySignaturePair{}
	mi := &file_wallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubKeySignaturePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeySignaturePair) ProtoMessage() {}

func (x *PubKeySignaturePair) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeySignaturePair.ProtoReflect.Descriptor instead.
func (*PubKeySignaturePair) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *PubKeySignaturePair) GetExtendedPubKey() string {
	if x != nil {
		return x.ExtendedPubKey
	}
	return ""
}

func (x *PubKeySignaturePair) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SubnetworkId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bytes         []byte                 `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetworkId) Reset() {
	*x = SubnetworkId{}
	mi := &file_wallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetworkId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetworkId) ProtoMessage() {}

func (x *SubnetworkId) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetworkId.ProtoReflect.Descriptor instead.
func (*SubnetworkId) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *SubnetworkId) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type TransactionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Inputs        []*TransactionInput    `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*TransactionOutput   `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	LockTime      uint64                 `protobuf:"varint,4,opt,name=lockTime,proto3" json:"lockTime,omitempty"`
	SubnetworkId  *SubnetworkId          `protobuf:"bytes,5,opt,name=subnetworkId,proto3" json:"subnetworkId,omitempty"`
	Gas           uint64                 `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	Payload       []byte                 `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	mi := &file_wallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionMessage) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TransactionMessage) GetInputs() []*TransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionMessage) GetOutputs() []*TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionMessage) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TransactionMessage) GetSubnetworkId() *SubnetworkId {
	if x != nil {
		return x.SubnetworkId
	}
	return nil
}

func (x *TransactionMessage) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TransactionInput struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PreviousOutpoint *Outpoint              `protobuf:"bytes,1,opt,name=previousOutpoint,proto3" json:"previousOutpoint,omitempty"`
	SignatureScript  []byte                 `protobuf:"bytes,2,opt,name=signatureScript,proto3" json:"signatureScript,omitempty"`
	Sequence         uint64                 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SigOpCount       uint32                 `protobuf:"varint,4,opt,name=sigOpCount,proto3" json:"sigOpCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransactionInput) Reset() {
	*x = TransactionInput{}
	mi := &file_wallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInput) ProtoMessage() {}

func (x *TransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInput.ProtoReflect.Descriptor instead.
func (*TransactionInput) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionInput) GetPreviousOutpoint() *Outpoint {
	if x != nil {
		return x.PreviousOutpoint
	}
	return nil
}

func (x *TransactionInput) GetSignatureScript() []byte {
	if x != nil {
		return x.SignatureScript
	}
	return nil
}

func (x *TransactionInput) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TransactionInput) GetSigOpCount() uint32 {
	if x != nil {
		return x.SigOpCount
	}
	return 0
}

type Outpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId *TransactionId         `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	mi := &file_wallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *Outpoint) GetTransactionId() *TransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *Outpoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TransactionId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bytes         []byte                 `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionId) Reset() {
	*x = TransactionId{}
	mi := &file_wallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionId) ProtoMessage() {}

func (x *TransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionId.ProtoReflect.Descriptor instead.
func (*TransactionId) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionId) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ScriptPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Script        []byte                 `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	Version       uint32                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptPublicKey) Reset() {
	*x = ScriptPublicKey{}
	mi := &file_wallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptPublicKey) ProtoMessage() {}

func (x *ScriptPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptPublicKey.ProtoReflect.Descriptor instead.
func (*ScriptPublicKey) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *ScriptPublicKey) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *ScriptPublicKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TransactionOutput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Value           uint64                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ScriptPublicKey *ScriptPublicKey       `protobuf:"bytes,2,opt,name=scriptPublicKey,proto3" json:"scriptPublicKey,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransactionOutput) Reset() {
	*x = TransactionOutput{}
	mi := &file_wallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOutput) ProtoMessage() {}

func (x *TransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOutput.ProtoReflect.Descriptor instead.
func (*TransactionOutput) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionOutput) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransactionOutput) GetScriptPublicKey() *ScriptPublicKey {
	if x != nil {
		return x.ScriptPublicKey
	}
	return nil
}

var File_wallet_proto protoreflect.FileDescriptor

const file_wallet_proto_rawDesc = "" +
	"\n" +
	"\fwallet.proto\x12\x12protoserialization\"\xb4\x01\n" +
	"\x1aPartiallySignedTransaction\x126\n" +
	"\x02tx\x18\x01 \x01(\v2&.protoserialization.TransactionMessageR\x02tx\x12^\n" +
	"\x15partiallySignedInputs\x18\x02 \x03(\v2(.protoserialization.PartiallySignedInputR\x15partiallySignedInputs\"\xb4\x02\n" +
	"\x14PartiallySignedInput\x12\"\n" +
	"\fredeemScript\x18\x01 \x01(\fR\fredeemScript\x12E\n" +
	"\n" +
	"prevOutput\x18\x02 \x01(\v2%.protoserialization.TransactionOutputR\n" +
	"prevOutput\x12,\n" +
	"\x11minimumSignatures\x18\x03 \x01(\rR\x11minimumSignatures\x12[\n" +
	"\x14pubKeySignaturePairs\x18\x04 \x03(\v2'.protoserialization.PubKeySignaturePairR\x14pubKeySignaturePairs\x12&\n" +
	"\x0ederivationPath\x18\x05 \x01(\tR\x0ederivationPath\"[\n" +
	"\x13PubKeySignaturePair\x12&\n" +
	"\x0eextendedPubKey\x18\x01 \x01(\tR\x0eextendedPubKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"$\n" +
	"\fSubnetworkId\x12\x14\n" +
	"\x05bytes\x18\x01 \x01(\fR\x05bytes\"\xbb\x02\n" +
	"\x12TransactionMessage\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12<\n" +
	"\x06inputs\x18\x02 \x03(\v2$.protoserialization.TransactionInputR\x06inputs\x12?\n" +
	"\aoutputs\x18\x03 \x03(\v2%.protoserialization.TransactionOutputR\aoutputs\x12\x1a\n" +
	"\blockTime\x18\x04 \x01(\x04R\blockTime\x12D\n" +
	"\fsubnetworkId\x18\x05 \x01(\v2 .protoserialization.SubnetworkIdR\fsubnetworkId\x12\x10\n" +
	"\x03gas\x18\x06 \x01(\x04R\x03gas\x12\x18\n" +
	"\apayload\x18\b \x01(\fR\apayload\"\xc2\x01\n" +
	"\x10TransactionInput\x12H\n" +
	"\x10previousOutpoint\x18\x01 \x01(\v2\x1c.protoserialization.OutpointR\x10previousOutpoint\x12(\n" +
	"\x0fsignatureScript\x18\x02 \x01(\fR\x0fsignatureScript\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\x04R\bsequence\x12\x1e\n" +
	"\n" +
	"sigOpCount\x18\x04 \x01(\rR\n" +
	"sigOpCount\"i\n" +
	"\bOutpoint\x12G\n" +
	"\rtransactionId\x18\x01 \x01(\v2!.protoserialization.TransactionIdR\rtransactionId\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\"%\n" +
	"\rTransactionId\x12\x14\n" +
	"\x05bytes\x18\x01 \x01(\fR\x05bytes\"C\n" +
	"\x0fScriptPublicKey\x12\x16\n" +
	"\x06script\x18\x01 \x01(\fR\x06script\x12\x18\n" +
	"\aversion\x18\x02 \x01(\rR\aversion\"x\n" +
	"\x11TransactionOutput\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x04R\x05value\x12M\n" +
	"\x0fscriptPublicKey\x18\x02 \x01(\v2#.protoserialization.ScriptPublicKeyR\x0fscriptPublicKeyBWZUgithub.com/Hoosat-Oy/HTND/cmd/htnwallet/libhtnwallet/serialization/protoserializationb\x06proto3"

var (
	file_wallet_proto_rawDescOnce sync.Once
	file_wallet_proto_rawDescData []byte
)

func file_wallet_proto_rawDescGZIP() []byte {
	file_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wallet_proto_rawDesc), len(file_wallet_proto_rawDesc)))
	})
	return file_wallet_proto_rawDescData
}

var file_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wallet_proto_goTypes = []any{
	(*PartiallySignedTransaction)(nil), // 0: protoserialization.PartiallySignedTransaction
	(*PartiallySignedInput)(nil),       // 1: protoserialization.PartiallySignedInput
	(*PubKeySignaturePair)(nil),        // 2: protoserialization.PubKeySignaturePair
	(*SubnetworkId)(nil),               // 3: protoserialization.SubnetworkId
	(*TransactionMessage)(nil),         // 4: protoserialization.TransactionMessage
	(*TransactionInput)(nil),           // 5: protoserialization.TransactionInput
	(*Outpoint)(nil),                   // 6: protoserialization.Outpoint
	(*TransactionId)(nil),              // 7: protoserialization.TransactionId
	(*ScriptPublicKey)(nil),            // 8: protoserialization.ScriptPublicKey
	(*TransactionOutput)(nil),          // 9: protoserialization.TransactionOutput
}
var file_wallet_proto_depIdxs = []int32{
	4,  // 0: protoserialization.PartiallySignedTransaction.tx:type_name -> protoserialization.TransactionMessage
	1,  // 1: protoserialization.PartiallySignedTransaction.partiallySignedInputs:type_name -> protoserialization.PartiallySignedInput
	9,  // 2: protoserialization.PartiallySignedInput.prevOutput:type_name -> protoserialization.TransactionOutput
	2,  // 3: protoserialization.PartiallySignedInput.pubKeySignaturePairs:type_name -> protoserialization.PubKeySignaturePair
	5,  // 4: protoserialization.TransactionMessage.inputs:type_name -> protoserialization.TransactionInput
	9,  // 5: protoserialization.TransactionMessage.outputs:type_name -> protoserialization.TransactionOutput
	3,  // 6: protoserialization.TransactionMessage.subnetworkId:type_name -> protoserialization.SubnetworkId
	6,  // 7: protoserialization.TransactionInput.previousOutpoint:type_name -> protoserialization.Outpoint
	7,  // 8: protoserialization.Outpoint.transactionId:type_name -> protoserialization.TransactionId
	8,  // 9: protoserialization.TransactionOutput.scriptPublicKey:type_name -> protoserialization.ScriptPublicKey
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_wallet_proto_init() }
func file_wallet_proto_init() {
	if File_wallet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wallet_proto_rawDesc), len(file_wallet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_proto_depIdxs,
		MessageInfos:      file_wallet_proto_msgTypes,
	}.Build()
	File_wallet_proto = out.File
	file_wallet_proto_goTypes = nil
	file_wallet_proto_depIdxs = nil
}
